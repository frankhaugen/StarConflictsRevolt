@using StarConflictsRevolt.Clients.Models
@using StarConflictsRevolt.Clients.Blazor.Services
@inject IGameStateService GameState
@inject TelemetryService TelemetryService

<div class="fleet-manager">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5><i class="fas fa-ship"></i> Fleet Manager</h5>
            <button class="btn btn-sm btn-outline-secondary" @onclick="CloseFleetManager">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="card-body">
            @if (GameState.CurrentWorld?.Galaxy?.StarSystems != null)
            {
                <div class="row">
                    <div class="col-md-6">
                        <h6>Available Fleets</h6>
                        <div class="fleet-list">
                            @foreach (var starSystem in GameState.CurrentWorld.Galaxy.StarSystems)
                            {
                                @foreach (var planet in starSystem.Planets)
                                {
                                    <div class="fleet-item mb-2">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@planet.Name</strong>
                                                <small class="text-muted d-block">@starSystem.Name</small>
                                            </div>
                                            <div class="fleet-actions">
                                                <button class="btn btn-sm btn-primary" @onclick="() => SelectFleet(planet.Id)">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                                <button class="btn btn-sm btn-success" @onclick="() => MoveFleet(planet.Id)">
                                                    <i class="fas fa-arrows-alt"></i> Move
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>Fleet Details</h6>
                        @if (selectedFleetId != Guid.Empty)
                        {
                            <div class="fleet-details">
                                <div class="card">
                                    <div class="card-body">
                                        <h6>Fleet Information</h6>
                                        <p><strong>Location:</strong> @GetFleetLocation(selectedFleetId)</p>
                                        <p><strong>Status:</strong> <span class="badge bg-success">Ready</span></p>
                                        <p><strong>Ships:</strong> @GetFleetShipCount(selectedFleetId)</p>
                                        
                                        <div class="mt-3">
                                            <h6>Actions</h6>
                                            <div class="d-grid gap-2">
                                                <button class="btn btn-primary btn-sm" @onclick="ShowMoveFleetModal">
                                                    <i class="fas fa-arrows-alt"></i> Move Fleet
                                                </button>
                                                <button class="btn btn-warning btn-sm" @onclick="ShowAttackModal">
                                                    <i class="fas fa-crosshairs"></i> Attack
                                                </button>
                                                <button class="btn btn-info btn-sm" @onclick="ShowFleetDetails">
                                                    <i class="fas fa-info-circle"></i> Details
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-muted">
                                <i class="fas fa-info-circle"></i> Select a fleet to view details
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="text-center text-muted">
                    <i class="fas fa-ship fa-3x mb-3"></i>
                    <p>No fleets available. Create a session to start playing.</p>
                </div>
            }
        </div>
    </div>
</div>

@if (showMoveFleetModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Move Fleet</h5>
                    <button type="button" class="btn-close" @onclick="CloseMoveFleetModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">From:</label>
                        <input type="text" class="form-control" value="@GetFleetLocation(selectedFleetId)" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">To:</label>
                        <select class="form-select" @onchange="OnDestinationChanged">
                            <option value="">Select destination...</option>
                            @if (GameState.CurrentWorld?.Galaxy?.StarSystems != null)
                            {
                                @foreach (var starSystem in GameState.CurrentWorld.Galaxy.StarSystems)
                                {
                                    @foreach (var planet in starSystem.Planets)
                                    {
                                        <option value="@planet.Id">@planet.Name (@starSystem.Name)</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseMoveFleetModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ExecuteMoveFleet" disabled="@(selectedDestinationId == Guid.Empty)">
                        <i class="fas fa-arrows-alt"></i> Move Fleet
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showAttackModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Attack Target</h5>
                    <button type="button" class="btn-close" @onclick="CloseAttackModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Attacking Fleet:</label>
                        <input type="text" class="form-control" value="@GetFleetLocation(selectedFleetId)" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Target:</label>
                        <select class="form-select" @onchange="OnTargetChanged">
                            <option value="">Select target...</option>
                            @if (GameState.CurrentWorld?.Galaxy?.StarSystems != null)
                            {
                                @foreach (var starSystem in GameState.CurrentWorld.Galaxy.StarSystems)
                                {
                                    @foreach (var planet in starSystem.Planets)
                                    {
                                        <option value="@planet.Id">@planet.Name (@starSystem.Name)</option>
                                    }
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAttackModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ExecuteAttack" disabled="@(selectedTargetId == Guid.Empty)">
                        <i class="fas fa-crosshairs"></i> Attack
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Guid selectedFleetId = Guid.Empty;
    private Guid selectedDestinationId = Guid.Empty;
    private Guid selectedTargetId = Guid.Empty;
    private bool showMoveFleetModal = false;
    private bool showAttackModal = false;

    private void SelectFleet(Guid fleetId)
    {
        selectedFleetId = fleetId;
        TelemetryService.RecordGameAction("select_fleet");
    }

    private void MoveFleet(Guid fleetId)
    {
        selectedFleetId = fleetId;
        showMoveFleetModal = true;
    }

    private void ShowMoveFleetModal()
    {
        showMoveFleetModal = true;
    }

    private void CloseMoveFleetModal()
    {
        showMoveFleetModal = false;
        selectedDestinationId = Guid.Empty;
    }

    private void ShowAttackModal()
    {
        showAttackModal = true;
    }

    private void CloseAttackModal()
    {
        showAttackModal = false;
        selectedTargetId = Guid.Empty;
    }

    private void OnDestinationChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var destinationId))
        {
            selectedDestinationId = destinationId;
        }
    }

    private void OnTargetChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var targetId))
        {
            selectedTargetId = targetId;
        }
    }

    private async Task ExecuteMoveFleet()
    {
        if (selectedFleetId != Guid.Empty && selectedDestinationId != Guid.Empty)
        {
            var success = await GameState.MoveFleetAsync(selectedFleetId, selectedFleetId, selectedDestinationId);
            if (success)
            {
                TelemetryService.RecordGameAction("move_fleet");
                CloseMoveFleetModal();
            }
        }
    }

    private async Task ExecuteAttack()
    {
        if (selectedFleetId != Guid.Empty && selectedTargetId != Guid.Empty)
        {
            var success = await GameState.AttackAsync(selectedFleetId, selectedTargetId);
            if (success)
            {
                TelemetryService.RecordGameAction("attack");
                CloseAttackModal();
            }
        }
    }

    private void ShowFleetDetails()
    {
        // TODO: Implement fleet details modal
    }

    private void CloseFleetManager()
    {
        // This would be handled by the parent component
    }

    private string GetFleetLocation(Guid fleetId)
    {
        if (GameState.CurrentWorld?.Galaxy?.StarSystems != null)
        {
            foreach (var starSystem in GameState.CurrentWorld.Galaxy.StarSystems)
            {
                foreach (var planet in starSystem.Planets)
                {
                    if (planet.Id == fleetId)
                    {
                        return $"{planet.Name} ({starSystem.Name})";
                    }
                }
            }
        }
        return "Unknown";
    }

    private int GetFleetShipCount(Guid fleetId)
    {
        // TODO: Implement actual ship count logic
        return new Random().Next(1, 10);
    }
}

<style>
    .fleet-manager {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        max-width: 800px;
        z-index: 1050;
    }
    
    .fleet-item {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        background-color: #f8f9fa;
    }
    
    .fleet-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .fleet-details {
        min-height: 200px;
    }
</style>
