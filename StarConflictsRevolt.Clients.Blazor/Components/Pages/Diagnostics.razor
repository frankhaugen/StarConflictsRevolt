@page "/diagnostics"
@using StarConflictsRevolt.Clients.Blazor.Services
@using StarConflictsRevolt.Clients.Models
@using StarConflictsRevolt.Clients.Blazor.Models
@using StarConflictsRevolt.Clients.Shared.Authentication
@inject IGameStateService GameState
@inject BlazorSignalRService SignalRService
@inject TelemetryService TelemetryService
@inject NavigationManager Navigation
@inject ILogger<Diagnostics> Logger
@inject ITokenProvider TokenProvider
@inject IJSRuntime JSRuntime

<PageTitle>System Diagnostics</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 data-testid="diagnostics-title"><i class="fas fa-heartbeat text-danger"></i> System Diagnostics</h1>
                <div>
                    <button data-testid="refresh-btn" class="btn btn-outline-primary me-2" @onclick="RefreshData" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-sync-alt"></i>
                        }
                        Refresh
                    </button>
                    <button data-testid="back-btn" class="btn btn-outline-secondary" @onclick="NavigateToHome">
                        <i class="fas fa-arrow-left"></i> Back to Menu
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Authentication Status -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="auth-status-header"><i class="fas fa-shield-alt"></i> Authentication Status</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="d-flex align-items-center mb-2">
                                <div data-testid="auth-status" class="status-indicator @(isAuthenticated ? "connected" : "disconnected")"></div>
                                <span class="ms-2">Authentication</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <div data-testid="token-status" class="status-indicator @(hasValidToken ? "connected" : "disconnected")"></div>
                                <span class="ms-2">JWT Token</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">
                                Token Expires: @tokenExpiry.ToString("HH:mm:ss")
                            </small>
                        </div>
                    </div>
                    @if (hasValidToken)
                    {
                        <div class="mt-2">
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> Token valid for @tokenTimeRemaining
                            </small>
                        </div>
                    }
                    else
                    {
                        <div class="mt-2">
                            <small class="text-warning">
                                <i class="fas fa-exclamation-triangle"></i> No valid token available
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Connection Status -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="connection-status-header"><i class="fas fa-wifi"></i> Connection Status</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="d-flex align-items-center mb-2">
                                <div data-testid="game-server-status" class="status-indicator @(GameState.IsConnected ? "connected" : "disconnected")"></div>
                                <span class="ms-2">Game Server</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <div data-testid="signalr-status" class="status-indicator @(signalRConnected ? "connected" : "disconnected")"></div>
                                <span class="ms-2">SignalR</span>
                            </div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">
                                Last Update: @lastUpdate.ToString("HH:mm:ss")
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Session Information -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="session-info-header"><i class="fas fa-gamepad"></i> Session Information</h5>
                </div>
                <div class="card-body">
                    @if (GameState.CurrentSession != null)
                    {
                        <div class="mb-2">
                            <strong>Session:</strong> @GameState.CurrentSession.SessionName
                        </div>
                        <div class="mb-2">
                            <strong>Type:</strong> @GameState.CurrentSession.SessionType
                        </div>
                        <div class="mb-2">
                            <strong>Status:</strong> 
                            <span class="badge @(GameState.CurrentSession.IsActive ? "bg-success" : "bg-warning")">
                                @(GameState.CurrentSession.IsActive ? "Active" : "Waiting")
                            </span>
                        </div>
                        <div class="mb-2">
                            <strong>Created:</strong> @GameState.CurrentSession.Created.ToString("yyyy-MM-dd HH:mm:ss")
                        </div>
                    }
                    else
                    {
                        <div class="text-muted">No active session</div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- SignalR Statistics -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="signalr-stats-header"><i class="fas fa-broadcast-tower"></i> SignalR Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="metric-item">
                                <div class="metric-value">@signalRMessageCount</div>
                                <div class="metric-label">Messages Received</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="metric-item">
                                <div class="metric-value">@signalRReconnectCount</div>
                                <div class="metric-label">Reconnections</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="metric-item">
                                <div class="metric-value">@lastSignalRMessage.ToString("HH:mm:ss")</div>
                                <div class="metric-label">Last Message</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- HTTP Statistics -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="http-stats-header"><i class="fas fa-globe"></i> HTTP Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="metric-item">
                                <div class="metric-value">@httpRequestCount</div>
                                <div class="metric-label">Requests Sent</div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="metric-item">
                                <div class="metric-value">@httpErrorCount</div>
                                <div class="metric-label">Errors</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="metric-item">
                                <div class="metric-value">@averageResponseTime ms</div>
                                <div class="metric-label">Avg Response Time</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Real-time Activity Log -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 data-testid="activity-log-header"><i class="fas fa-list"></i> Activity Log</h5>
                    <button data-testid="clear-log-btn" class="btn btn-sm btn-outline-secondary" @onclick="ClearLog">
                        <i class="fas fa-trash"></i> Clear
                    </button>
                </div>
                <div class="card-body">
                    <div data-testid="activity-log" class="activity-log" style="height: 300px; overflow-y: auto;">
                        @foreach (var logEntry in activityLog.Take(50))
                        {
                            <div class="log-entry @logEntry.Type.ToLower()">
                                <span class="log-time">[@logEntry.Timestamp.ToString("HH:mm:ss")]</span>
                                <span class="log-message">@logEntry.Message</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Performance Metrics -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 data-testid="performance-metrics-header"><i class="fas fa-chart-line"></i> Performance Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="metric-item">
                                <div class="metric-value">@memoryUsage MB</div>
                                <div class="metric-label">Memory Usage</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric-item">
                                <div class="metric-value">@cpuUsage %</div>
                                <div class="metric-label">CPU Usage</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric-item">
                                <div class="metric-value">@uptime</div>
                                <div class="metric-label">Uptime</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric-item">
                                <div class="metric-value">@activeConnections</div>
                                <div class="metric-label">Active Connections</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Raw State Block -->
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 data-testid="raw-state-header"><i class="fas fa-code"></i> Raw State Block</h5>
                    <button data-testid="copy-state-btn" class="btn btn-sm btn-outline-primary" @onclick="CopyStateToClipboard">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <small class="text-muted">This block contains the raw application state for debugging purposes.</small>
                    </div>
                    <div data-testid="raw-state-content" class="raw-state-block" style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 1rem; font-family: 'Courier New', monospace; font-size: 0.875rem; white-space: pre-wrap; max-height: 400px; overflow-y: auto;">
@rawStateJson
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private bool signalRConnected = false;
    private int signalRMessageCount = 0;
    private int signalRReconnectCount = 0;
    private DateTime lastSignalRMessage = DateTime.MinValue;
    private int httpRequestCount = 0;
    private int httpErrorCount = 0;
    private int averageResponseTime = 0;
    private long memoryUsage = 0;
    private int cpuUsage = 0;
    private string uptime = "00:00:00";
    private int activeConnections = 0;
    private DateTime lastUpdate = DateTime.Now;
    private List<LogEntry> activityLog = new();
    private Timer? refreshTimer;
    
    // Authentication status variables
    private bool isAuthenticated = false;
    private bool hasValidToken = false;
    private DateTime tokenExpiry = DateTime.MinValue;
    private string tokenTimeRemaining = "Unknown";
    private string? currentToken = null;
    
    // Raw state variables
    private string rawStateJson = "Loading...";

    protected override void OnInitialized()
    {
        // Subscribe to SignalR events
        SignalRService.UpdatesReceived += OnSignalRMessage;
        SignalRService.ConnectionClosed += OnSignalRConnectionClosed;
        SignalRService.Reconnecting += OnSignalRReconnecting;
        SignalRService.Reconnected += OnSignalRReconnected;
        
        // Subscribe to game state changes
        GameState.StateChanged += OnGameStateChanged;
        
        // Start refresh timer
        refreshTimer = new Timer(RefreshDataCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        
        // Initial data load
        _ = Task.Run(RefreshDataAsync);
    }

    private async Task RefreshData()
    {
        isLoading = true;
        await RefreshDataAsync();
        isLoading = false;
    }

    private async Task RefreshDataAsync()
    {
        try
        {
            // Update performance metrics
            await UpdatePerformanceMetrics();
            
            // Update connection status
            signalRConnected = GameState.IsConnected;
            
            // Update authentication status
            await UpdateAuthenticationStatus();
            
            // Update raw state
            await UpdateRawState();
            
            lastUpdate = DateTime.Now;
            AddLogEntry("info", "Diagnostics data refreshed");
        }
        catch (Exception ex)
        {
            AddLogEntry("error", $"Error refreshing data: {ex.Message}");
        }
    }

    private async Task UpdateAuthenticationStatus()
    {
        try
        {
            // Check if we have a valid token
            if (TokenProvider != null)
            {
                try
                {
                    currentToken = await TokenProvider.GetTokenAsync();
                    hasValidToken = !string.IsNullOrEmpty(currentToken);
                    
                    if (hasValidToken)
                    {
                        // Try to decode token to get expiry (simplified - in production use proper JWT library)
                        var timeRemaining = TimeSpan.FromHours(1); // Default assumption
                        tokenExpiry = DateTime.UtcNow.Add(timeRemaining);
                        tokenTimeRemaining = timeRemaining.ToString(@"hh\:mm\:ss");
                        
                        isAuthenticated = true;
                        AddLogEntry("success", "Authentication successful - valid token available");
                    }
                    else
                    {
                        isAuthenticated = false;
                        AddLogEntry("warning", "No valid token available");
                    }
                }
                catch (Exception ex)
                {
                    isAuthenticated = false;
                    hasValidToken = false;
                    AddLogEntry("error", $"Authentication failed: {ex.Message}");
                }
            }
            else
            {
                isAuthenticated = false;
                hasValidToken = false;
                AddLogEntry("warning", "Token provider not available");
            }
        }
        catch (Exception ex)
        {
            AddLogEntry("error", $"Error checking authentication status: {ex.Message}");
        }
    }

    private void RefreshDataCallback(object? state)
    {
        _ = Task.Run(RefreshDataAsync);
    }

    private async Task UpdatePerformanceMetrics()
    {
        try
        {
            // Get memory usage
            var process = System.Diagnostics.Process.GetCurrentProcess();
            memoryUsage = process.WorkingSet64 / 1024 / 1024; // Convert to MB
            
            // Update telemetry service with memory usage
            TelemetryService.UpdateMemoryUsage(process.WorkingSet64);
            
            // Calculate uptime
            var startTime = process.StartTime;
            var elapsed = DateTime.Now - startTime;
            uptime = elapsed.ToString(@"hh\:mm\:ss");
            
            // Simulate CPU usage (in a real implementation, you'd use proper CPU monitoring)
            cpuUsage = new Random().Next(10, 50);
            
            // Update active connections (simulated)
            activeConnections = signalRConnected ? 1 : 0;
            TelemetryService.UpdateActiveConnections(activeConnections);
            
            // Trigger UI update
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            AddLogEntry("error", $"Error updating performance metrics: {ex.Message}");
        }
    }

    private void OnSignalRMessage(List<GameObjectUpdate> updates)
    {
        signalRMessageCount += updates.Count;
        lastSignalRMessage = DateTime.Now;
        AddLogEntry("info", $"Received {updates.Count} SignalR updates");
    }

    private void OnSignalRConnectionClosed(Exception? exception)
    {
        signalRConnected = false;
        AddLogEntry("warning", $"SignalR connection closed: {exception?.Message ?? "Unknown reason"}");
    }

    private void OnSignalRReconnecting(Exception? exception)
    {
        AddLogEntry("info", "SignalR reconnecting...");
    }

    private void OnSignalRReconnected(string connectionId)
    {
        signalRConnected = true;
        signalRReconnectCount++;
        AddLogEntry("success", $"SignalR reconnected: {connectionId}");
    }

    private void OnGameStateChanged()
    {
        AddLogEntry("info", "Game state changed");
        InvokeAsync(StateHasChanged);
    }

    private void AddLogEntry(string type, string message)
    {
        var logEntry = new LogEntry
        {
            Timestamp = DateTime.Now,
            Type = type,
            Message = message
        };
        
        activityLog.Insert(0, logEntry);
        
        // Keep only last 100 entries
        if (activityLog.Count > 100)
        {
            activityLog = activityLog.Take(100).ToList();
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void ClearLog()
    {
        activityLog.Clear();
    }

    private async Task UpdateRawState()
    {
        try
        {
            var state = new
            {
                Timestamp = DateTime.UtcNow,
                Application = new
                {
                    Name = "Star Conflicts Revolt",
                    Version = "1.0.0",
                    Environment = "Development"
                },
                Authentication = new
                {
                    IsAuthenticated = isAuthenticated,
                    HasValidToken = hasValidToken,
                    TokenExpiry = tokenExpiry,
                    TokenTimeRemaining = tokenTimeRemaining,
                    CurrentToken = currentToken != null ? $"{currentToken[..Math.Min(20, currentToken.Length)]}..." : null
                },
                Connection = new
                {
                    GameServerConnected = GameState.IsConnected,
                    SignalRConnected = signalRConnected,
                    LastUpdate = lastUpdate
                },
                Session = new
                {
                    CurrentSession = GameState.CurrentSession != null ? new
                    {
                        Id = GameState.CurrentSession.Id,
                        Name = GameState.CurrentSession.SessionName,
                        Type = GameState.CurrentSession.SessionType,
                        IsActive = GameState.CurrentSession.IsActive,
                        Created = GameState.CurrentSession.Created
                    } : null,
                    CurrentWorld = GameState.CurrentWorld != null ? new
                    {
                        Id = GameState.CurrentWorld.Id,
                        GalaxyId = GameState.CurrentWorld.Galaxy.Id,
                        StarSystemsCount = GameState.CurrentWorld.Galaxy.StarSystems.Count()
                    } : null
                },
                Statistics = new
                {
                    SignalR = new
                    {
                        MessageCount = signalRMessageCount,
                        ReconnectCount = signalRReconnectCount,
                        LastMessage = lastSignalRMessage
                    },
                    HTTP = new
                    {
                        RequestCount = httpRequestCount,
                        ErrorCount = httpErrorCount,
                        AverageResponseTime = averageResponseTime
                    }
                },
                Performance = new
                {
                    MemoryUsageMB = memoryUsage,
                    CpuUsagePercent = cpuUsage,
                    Uptime = uptime,
                    ActiveConnections = activeConnections
                },
                ActivityLog = activityLog.Take(10).Select(log => new
                {
                    Timestamp = log.Timestamp,
                    Type = log.Type,
                    Message = log.Message
                }).ToArray()
            };

            rawStateJson = System.Text.Json.JsonSerializer.Serialize(state, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });
        }
        catch (Exception ex)
        {
            rawStateJson = $"Error generating state: {ex.Message}";
            AddLogEntry("error", $"Error updating raw state: {ex.Message}");
        }
    }

    private async Task CopyStateToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", rawStateJson);
            AddLogEntry("success", "Raw state copied to clipboard");
        }
        catch (Exception ex)
        {
            AddLogEntry("error", $"Failed to copy to clipboard: {ex.Message}");
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        
        // Unsubscribe from events
        SignalRService.UpdatesReceived -= OnSignalRMessage;
        SignalRService.ConnectionClosed -= OnSignalRConnectionClosed;
        SignalRService.Reconnecting -= OnSignalRReconnecting;
        SignalRService.Reconnected -= OnSignalRReconnected;
        GameState.StateChanged -= OnGameStateChanged;
    }
}

<style>
    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
    }
    
    .status-indicator.connected {
        background-color: #28a745;
    }
    
    .status-indicator.disconnected {
        background-color: #dc3545;
    }
    
    .metric-item {
        text-align: center;
        padding: 10px;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #007bff;
    }
    
    .metric-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-top: 5px;
    }
    
    .log-entry {
        padding: 5px 10px;
        margin: 2px 0;
        border-radius: 3px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
    }
    
    .log-entry.info {
        background-color: #e7f3ff;
        border-left: 3px solid #007bff;
    }
    
    .log-entry.success {
        background-color: #e8f5e8;
        border-left: 3px solid #28a745;
    }
    
    .log-entry.warning {
        background-color: #fff3cd;
        border-left: 3px solid #ffc107;
    }
    
    .log-entry.error {
        background-color: #f8d7da;
        border-left: 3px solid #dc3545;
    }
    
    .log-time {
        color: #6c757d;
        margin-right: 10px;
    }
    
    .log-message {
        color: #333;
    }
</style>

@implements IDisposable
