// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarConflictsRevolt.Server.WebApi.Datastore;
using StarConflictsRevolt.Server.WebApi.Infrastructure.Datastore;

#nullable disable

namespace StarConflictsRevolt.Server.WebApi.Datastore.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Fleet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fleets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Rebel Flagship",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Imperial Fleet",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Galaxy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Galaxies");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DistanceFromSun")
                        .HasColumnType("float");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrbitSpeed")
                        .HasColumnType("float");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<double>("RotationSpeed")
                        .HasColumnType("float");

                    b.Property<Guid?>("StarSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StarSystemId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.PlayerStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BattlesLost")
                        .HasColumnType("int");

                    b.Property<int>("BattlesWon")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("FleetsOwned")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanetsControlled")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StructuresBuilt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FleetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUnderConstruction")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FleetId");

                    b.ToTable("Ships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            IsUnderConstruction = false,
                            Model = "X-Wing"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            IsUnderConstruction = false,
                            Model = "Y-Wing"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            IsUnderConstruction = false,
                            Model = "TIE Fighter"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            IsUnderConstruction = false,
                            Model = "Star Destroyer"
                        });
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.StarSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalaxyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GalaxyId");

                    b.ToTable("StarSystems");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Structure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Variant")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Structures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000001"),
                            Variant = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000002"),
                            Variant = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000003"),
                            Variant = 2
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000004"),
                            Variant = 3
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000005"),
                            Variant = 4
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-200000000006"),
                            Variant = 5
                        });
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.World", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GalaxyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalaxyId");

                    b.ToTable("Worlds");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Planet", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Entities.StarSystem", null)
                        .WithMany("Planets")
                        .HasForeignKey("StarSystemId");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Session", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Client", "Client")
                        .WithMany("Sessions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Ship", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Fleet", null)
                        .WithMany("Ships")
                        .HasForeignKey("FleetId");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.StarSystem", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Galaxy", null)
                        .WithMany("StarSystems")
                        .HasForeignKey("GalaxyId");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Structure", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.World", b =>
                {
                    b.HasOne("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Galaxy", "Galaxy")
                        .WithMany()
                        .HasForeignKey("GalaxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Galaxy");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Client", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Fleet", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.Galaxy", b =>
                {
                    b.Navigation("StarSystems");
                });

            modelBuilder.Entity("StarConflictsRevolt.Server.WebApi.Datastore.Entities.StarSystem", b =>
                {
                    b.Navigation("Planets");
                });
#pragma warning restore 612, 618
        }
    }
}
